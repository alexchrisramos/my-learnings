Application Lifecycle management
  Rolling updates
  Configured applications
  Scale applications
  Self healing

Rollout and Versioning in Deployments
  pods deployments are revision controlled
  revision 1 > revision 2 > revision 3

  rollout command:
  kubectl rollout status deployment/myapp-deployment
  kubectl rollout history deployment/myapp-deployment

  deployment strategy
  1. Recreate - destroys all old version then deploys new version
  2. Rolling update - (default) destroys 1 pod at a time then redeploy with new revision after each

  Rolling update under the hood:
    creates new replicaset and scale up the count while decreasing the count for old replicaset
  
  to Undo the update
    kubectl rollout undo deployment/myapp-deployment

  kubectl edit deployment <deploymentname>
  to change the strategy and change the image


Configuring applications
  Commands and Arguments

  in docker word
  commands are passed to the container
  Example:
    FROM ubuntu
    ENTRYPOINT ["sleep"]
    CMD ["5"]
      docker run ubuntu-sleeper 10  (the 10 will override the 5)
      docker run --entrypoint sleep2.0 ubuntu-sleeper 10  (--entrypoint overwrites the entrypoint)
  
  in kubernetes world

apiVersion: v1
kind: Pod
metadata:
  name: myapp
  labels:
    name: myapp
spec:
  containers:
  - name: myapp
    image: <Image>
    command: ["sleep2.0"] (this will overwrite the ENTRYPOINT)
    args: ["5"]  (this will overwrite the CMD)



Environment variable
  Different way of specifying the env variables
  1. pod definition
  2. configMaps
  3. Secrets

  pod definition
  apiVersion: v1
  kind: Pod
  metadata:
    name: myapp
    labels:
      name: myapp
  spec:
    containers:
    - name: myapp
      image: <Image>
      env:
        - name: APP_COLOR  (environment variable name)
          value: pink (the value)
  
  configMap
    env:
      - name: APP_COLOR
        valueFrom: 
          configMapKeyRef:

  Secrets
    env:
      - name: APP_COLOR
        valueFrom:
          secretKeyRef:         


ConfigMaps

  Imperative
    kubectl create configmap
      <config-name> --from-literal=<key>=<value>
    kubectl create configmap \
      app-config --from-literal=APP_COLOR=blue \
                 --from-literal=APP_MOD=prod \
                 <and so on>
    kubectl create configmap \
      app-config --from-file=app_config.properties


  Declarative (definition file)

apiVersion: v1
kind: ConfigMap
metadata:
  name: myconfigmap
  labels:
    app: myapplication
data:
  my-key: my-value


apiVersion: v1
kind: Pod
metadata:
  name: myapp
  labels:
    name: myapp
spec:
  containers:
  - name: myapp
    image: <Image>
    envFrom:
      - configMapRef:
        name: myconfigmap
    ports:
      - containerPort: <Port>




  getting the configmaps
  kubectl get configmaps
  kubectl describe configmaps

